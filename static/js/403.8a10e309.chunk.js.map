{"version":3,"file":"static/js/403.8a10e309.chunk.js","mappings":"gRA6EA,UApEsB,WACpB,IACMA,EADcC,EAAQ,MACIC,MAAMC,OAAOC,SAASC,KAAKC,QAAQ,cAAe,KAC5EC,EAAQP,EAAYO,OAAS,iBAC7BC,EAAQR,EAAYQ,QAAS,IAAIC,MAAOC,cACxCC,EAAgB,IAAIF,KAAKA,KAAKP,MAAMM,KAAW,IAAIC,KAGnDG,EAAgB,kBACpB,iBAAKC,UAAU,mBAAf,WACE,SAAC,IAAD,CAAOC,KAAMC,EAAAA,EAAUC,KAAK,SAC5B,yCAHkB,EA6CtB,OACE,iBAAKH,UAAU,kBAAf,WACE,wBAAKN,KACL,mBACA,SAAC,KAAD,CAAWU,KAAMN,EAAeO,SAzCnB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAClC,OAD2D,EAAhBC,WAGlC,SAACV,EAAD,KAIL,gBAAKC,UAAU,cAAf,UACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAMA,UAAU,8BAAhB,WACE,SAAC,KAAD,CAAMU,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAxB,SACGN,KAEH,SAAC,KAAD,CAAMI,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAxB,SACGL,KAEH,SAAC,KAAD,CAAMG,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAxB,SACGJ,QAGL,UAAC,KAAD,CAAMR,UAAU,wCAAhB,WACE,SAAC,KAAD,CAAMU,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAxB,oBAGA,SAAC,KAAD,CAAMF,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAxB,sBAGA,SAAC,KAAD,CAAMF,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAxB,4BAQX,KAOG,mBACA,gBAAKZ,UAAU,OAAf,UACE,SAAC,KAAD,CAAQa,IAAKC,EAAMC,MAAO,IAAKC,OAAQ,SAEzC,mBACA,SAAC,IAAD,CAAQC,MAAO3B,OAAOC,SAAS2B,SAGpC,C","sources":["views/Timer.js"],"sourcesContent":["import React from 'react'\nimport { CContainer, CCol, CRow, CImage } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilAlarm } from '@coreui/icons'\nimport Countdown from 'react-countdown'\nimport QRCode from 'react-qr-code'\nimport 'react-datetime/css/react-datetime.css'\nimport logo from '../assets/images/levelup_logo.png'\n\nconst CountdownView = () => {\n  const queryString = require('query-string')\n  const queryParams = queryString.parse(window.location.hash.replace('#/countdown', ''))\n  const title = queryParams.title || 'Time Remaining'\n  const until = queryParams.until || new Date().toISOString()\n  const selected_time = new Date(Date.parse(until)) || new Date()\n\n  // What to show when time has elapsed\n  const Completionist = () => (\n    <div className=\"text-danger fs-1\">\n      <CIcon icon={cilAlarm} size=\"xxl\" />\n      <p>Time is up!</p>\n    </div>\n  )\n\n  // Renderer callback with condition\n  const renderer = ({ hours, minutes, seconds, completed }) => {\n    if (completed) {\n      // Render a completed state\n      return <Completionist />\n    } else {\n      // Render a countdown\n      return (\n        <div className=\"text-center\">\n          <CContainer>\n            <CRow className=\"fs-1 justify-content-center\">\n              <CCol xl={1} md={2} xs={4}>\n                {hours}\n              </CCol>\n              <CCol xl={1} md={2} xs={4}>\n                {minutes}\n              </CCol>\n              <CCol xl={1} md={2} xs={4}>\n                {seconds}\n              </CCol>\n            </CRow>\n            <CRow className=\"justify-content-center text-uppercase\">\n              <CCol xl={1} md={2} xs={4}>\n                hours\n              </CCol>\n              <CCol xl={1} md={2} xs={4}>\n                minutes\n              </CCol>\n              <CCol xl={1} md={2} xs={4}>\n                seconds\n              </CCol>\n            </CRow>\n          </CContainer>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div className=\"m-4 text-center\">\n      <h1>{title}</h1>\n      <hr />\n      <Countdown date={selected_time} renderer={renderer} />\n      <hr />\n      <div className=\"fs-1\">\n        <CImage src={logo} width={170} height={170} />\n      </div>\n      <hr />\n      <QRCode value={window.location.href} />\n    </div>\n  )\n}\n\nexport default CountdownView\n"],"names":["queryParams","require","parse","window","location","hash","replace","title","until","Date","toISOString","selected_time","Completionist","className","icon","cilAlarm","size","date","renderer","hours","minutes","seconds","completed","xl","md","xs","src","logo","width","height","value","href"],"sourceRoot":""}