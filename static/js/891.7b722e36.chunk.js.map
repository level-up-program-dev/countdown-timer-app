{"version":3,"file":"static/js/891.7b722e36.chunk.js","mappings":"gRAqKA,UAnJa,WACX,OAAgCA,EAAAA,EAAAA,UAAS,IAAIC,MAA7C,eAAKC,EAAL,KAAoBC,EAApB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,kBAAnC,eAAOI,EAAP,KAAcC,EAAd,KAOA,OACE,UAAC,KAAD,CAAOC,MAAM,QAAQC,UAAU,qBAA/B,WACE,SAAC,KAAD,CAAaA,UAAU,OAAvB,4BACA,UAAC,KAAD,YACE,SAAC,KAAD,kGAGA,UAAC,KAAD,YACE,UAAC,KAAD,CAAMC,GAAI,CAAEC,KAAM,GAAlB,WACE,SAAC,KAAD,CACEC,GAAG,aACHC,KAAK,OACLC,MAAM,QACNC,YAAY,iBACZV,SApBS,SAACW,GACpBT,EAASS,EAAMC,OAAOC,MACvB,EAmBWA,MAAOZ,KAET,UAAC,KAAD,CAAMG,UAAU,OAAhB,WACE,mBAAOA,UAAU,aAAjB,WACE,SAAC,IAAD,CAAOU,KAAMC,EAAAA,IADf,oBAIA,SAAC,IAAD,CACEC,gBAAgB,OAChBC,aAAc,IAAInB,KAClBe,MAAOd,EACPC,SAAUA,EACVkB,OAAO,KAET,gBAAKd,UAAU,YAAf,kDAGJ,UAAC,KAAD,CAAMA,UAAU,yBAAyBC,GAAI,CAAEC,KAAM,GAAKa,GAAI,CAAEb,KAAM,GAAtE,WACE,SAAC,KAAD,WACE,gBAAKF,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,qBACVgB,KAAK,KACLC,QAAS,SAACV,GACRA,EAAMW,iBACN,IACIC,EAAU,IAAIzB,KAClBC,EAAgB,IAAID,KAAKyB,EAAQC,UAFf,KAGlBxB,EAASD,EACV,EATH,4BAeJ,SAAC,KAAD,WACE,gBAAKK,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,qBACVgB,KAAK,KACLC,QAAS,SAACV,GACRA,EAAMW,iBACN,IACIC,EAAU,IAAIzB,KAClBC,EAAgB,IAAID,KAAKyB,EAAQC,UAFf,KAGlBxB,EAASD,EACV,EATH,6BAeJ,SAAC,KAAD,WACE,gBAAKK,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,qBACVgB,KAAK,KACLC,QAAS,SAACV,GACRA,EAAMW,iBACN,IACIC,EAAU,IAAIzB,KAClBC,EAAgB,IAAID,KAAKyB,EAAQC,UAFf,MAGlBxB,EAASD,EACV,EATH,6BAeJ,SAAC,KAAD,WACE,gBAAKK,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,qBACVgB,KAAK,KACLC,QAAS,SAACV,GACRA,EAAMW,iBACN,IACIC,EAAU,IAAIzB,KAClBC,EAAgB,IAAID,KAAKyB,EAAQC,UAFf,MAGlBxB,EAASD,EACV,EATH,6BAeJ,gBAAKK,UAAU,eAAf,UACE,SAAC,KAAD,WACE,gBAAKA,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,qBACVgB,KAAK,KACLC,QAAS,SAACV,GACRA,EAAMW,iBACN,IACIC,EAAU,IAAIzB,KAClBC,EAAgB,IAAID,KAAKyB,EAAQC,UAFf,MAGlBxB,EAASD,EACV,EATH,oCAmBZ,SAAC,KAAD,WACE,gBAAKK,UAAU,eAAf,UACE,SAAC,KAAD,CACED,MAAM,UACNiB,KAAK,KACLC,QAAS,SAACI,GAAD,OAnIF,SAACC,EAAMzB,GACtB0B,OAAOC,SAAWD,OAAOC,SAASC,KAAO,qBAAuBH,EAAO,UAAYzB,CACpF,CAiIyB6B,CAAS/B,EAAcgC,cAAe9B,EAA7C,EAHX,+BAWT,C","sources":["views/Home.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  CCol,\n  CRow,\n  CCard,\n  CCardHeader,\n  CCardFooter,\n  CCardBody,\n  CCardText,\n  CButton,\n  CForm,\n  CFormInput,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilClock } from '@coreui/icons'\nimport Datetime from 'react-datetime'\nimport 'react-datetime/css/react-datetime.css'\n\nconst Home = () => {\n  let [selected_time, onChange] = useState(new Date())\n  const [title, setTitle] = useState('Time Remaining')\n  const handleChange = (event) => {\n    setTitle(event.target.value)\n  }\n  const redirect = (time, title) => {\n    window.location = window.location.href + '#/countdown?until=' + time + '&title=' + title\n  }\n  return (\n    <CCard color=\"light\" className=\"shadow m-2 rounded\">\n      <CCardHeader className=\"fs-1\">Set Countdown</CCardHeader>\n      <CCardBody>\n        <CCardText>\n          Choose a date and time below, then click the button to create your sharable timer.\n        </CCardText>\n        <CForm>\n          <CRow xs={{ cols: 1 }}>\n            <CFormInput\n              id=\"titlefield\"\n              type=\"text\"\n              label=\"Title\"\n              placeholder=\"Time remaining\"\n              onChange={handleChange}\n              value={title}\n            />\n            <CCol className=\"mt-2\">\n              <label className=\"form-label\">\n                <CIcon icon={cilClock} />\n                &nbsp; Datetime\n              </label>\n              <Datetime\n                initialViewMode=\"time\"\n                initialValue={new Date()}\n                value={selected_time}\n                onChange={onChange}\n                input={false}\n              />\n              <div className=\"form-text\">Must be a time in the future.</div>\n            </CCol>\n          </CRow>\n          <CRow className=\"justify-content-center\" xs={{ cols: 2 }} sm={{ cols: 5 }}>\n            <CCol>\n              <div className=\"d-grid gap-2\">\n                <CButton\n                  className=\"mt-4 btn-secondary\"\n                  size=\"sm\"\n                  onClick={(event) => {\n                    event.preventDefault()\n                    const timeToAdd = 5 * 60 * 1000\n                    let curTime = new Date()\n                    selected_time = new Date(curTime.getTime() + timeToAdd)\n                    onChange(selected_time)\n                  }}\n                >\n                  5 Minutes\n                </CButton>\n              </div>\n            </CCol>\n            <CCol>\n              <div className=\"d-grid gap-2\">\n                <CButton\n                  className=\"mt-4 btn-secondary\"\n                  size=\"sm\"\n                  onClick={(event) => {\n                    event.preventDefault()\n                    const timeToAdd = 10 * 60 * 1000\n                    let curTime = new Date()\n                    selected_time = new Date(curTime.getTime() + timeToAdd)\n                    onChange(selected_time)\n                  }}\n                >\n                  10 Minutes\n                </CButton>\n              </div>\n            </CCol>\n            <CCol>\n              <div className=\"d-grid gap-2\">\n                <CButton\n                  className=\"mt-4 btn-secondary\"\n                  size=\"sm\"\n                  onClick={(event) => {\n                    event.preventDefault()\n                    const timeToAdd = 13 * 60 * 1000\n                    let curTime = new Date()\n                    selected_time = new Date(curTime.getTime() + timeToAdd)\n                    onChange(selected_time)\n                  }}\n                >\n                  13 Minutes\n                </CButton>\n              </div>\n            </CCol>\n            <CCol>\n              <div className=\"d-grid gap-2\">\n                <CButton\n                  className=\"mt-4 btn-secondary\"\n                  size=\"sm\"\n                  onClick={(event) => {\n                    event.preventDefault()\n                    const timeToAdd = 20 * 60 * 1000\n                    let curTime = new Date()\n                    selected_time = new Date(curTime.getTime() + timeToAdd)\n                    onChange(selected_time)\n                  }}\n                >\n                  20 Minutes\n                </CButton>\n              </div>\n            </CCol>\n            <div className=\"d-grid gap-2\">\n              <CCol>\n                <div className=\"d-grid gap-2\">\n                  <CButton\n                    className=\"mt-4 btn-secondary\"\n                    size=\"sm\"\n                    onClick={(event) => {\n                      event.preventDefault()\n                      const timeToAdd = 60 * 60 * 1000\n                      let curTime = new Date()\n                      selected_time = new Date(curTime.getTime() + timeToAdd)\n                      onChange(selected_time)\n                    }}\n                  >\n                    1 Hour\n                  </CButton>\n                </div>\n              </CCol>\n            </div>\n          </CRow>\n        </CForm>\n      </CCardBody>\n      <CCardFooter>\n        <div className=\"d-grid gap-2\">\n          <CButton\n            color=\"primary\"\n            size=\"lg\"\n            onClick={(e) => redirect(selected_time.toISOString(), title)}\n          >\n            Start Timer\n          </CButton>\n        </div>\n      </CCardFooter>\n    </CCard>\n  )\n}\n\nexport default Home\n"],"names":["useState","Date","selected_time","onChange","title","setTitle","color","className","xs","cols","id","type","label","placeholder","event","target","value","icon","cilClock","initialViewMode","initialValue","input","sm","size","onClick","preventDefault","curTime","getTime","e","time","window","location","href","redirect","toISOString"],"sourceRoot":""}