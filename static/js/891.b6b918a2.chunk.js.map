{"version":3,"file":"static/js/891.b6b918a2.chunk.js","mappings":"2RA2KA,UAtJa,WACX,OAAgCA,EAAAA,EAAAA,UAAS,IAAIC,MAA7C,eAAKC,EAAL,KAAoBC,EAApB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,kBAAnC,eAAOI,EAAP,KAAcC,EAAd,KAOA,SAASC,EAAUC,GACjB,IAAMC,EAAuB,GAAXD,EAAgB,IAC9BE,EAAU,IAAIR,KAElB,OADAC,EAAgB,IAAID,KAAKQ,EAAQC,UAAYF,EAE9C,CACD,OACE,UAAC,KAAD,CAAYG,IAAE,EAAd,WACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAQC,IAAKC,EAAMC,MAAO,IAAKC,OAAQ,WAG3C,UAAC,KAAD,CAAOC,MAAM,YAAYC,UAAU,OAAOC,UAAU,qBAApD,WACE,SAAC,KAAD,CAAaA,UAAU,UAAvB,8BACA,UAAC,KAAD,YACE,SAAC,KAAD,CAAWA,UAAU,OAArB,iGAGA,UAAC,KAAD,YACE,UAAC,KAAD,CAAMC,GAAI,CAAEC,KAAM,GAAlB,WACE,SAAC,KAAD,CAAMF,UAAU,OAAhB,UACE,SAAC,KAAD,CACEG,GAAG,aACHC,KAAK,OACLC,MAAM,QACNC,YAAY,iBACZrB,SAjCK,SAACsB,GACpBpB,EAASoB,EAAMC,OAAOC,MACvB,EAgCeA,MAAOvB,EACPwB,KAAK,KACLV,UAAU,YAGd,UAAC,KAAD,CAAMA,UAAU,OAAhB,WACE,mBAAOA,UAAU,aAAjB,WACE,SAAC,IAAD,CAAOW,KAAMC,EAAAA,IADf,uBAIA,SAAC,IAAD,CACEC,gBAAgB,OAChBC,aAAc,IAAI/B,KAClB0B,MAAOzB,EACPC,SAAUA,EACV8B,OAAO,EACPL,KAAK,QAEP,gBAAKV,UAAU,YAAf,kDAGJ,UAAC,KAAD,CAAMA,UAAU,yBAAyBC,GAAI,CAAEC,KAAM,GAAKT,GAAI,CAAES,KAAM,GAAtE,WACE,SAAC,KAAD,WACE,gBAAKF,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,gBACVU,KAAK,KACLM,QAAS,SAACT,GACRA,EAAMU,iBACNhC,EAASG,EAAU,GACpB,EANH,4BAYJ,SAAC,KAAD,WACE,gBAAKY,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,gBACVU,KAAK,KACLM,QAAS,SAACT,GACRA,EAAMU,iBACNhC,EAASG,EAAU,IACpB,EANH,6BAYJ,SAAC,KAAD,WACE,gBAAKY,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,gBACVU,KAAK,KACLM,QAAS,SAACT,GACRA,EAAMU,iBACNhC,EAASG,EAAU,IACpB,EANH,6BAYJ,SAAC,KAAD,WACE,gBAAKY,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,gBACVU,KAAK,KACLM,QAAS,SAACT,GACRA,EAAMU,iBACNhC,EAASG,EAAU,IACpB,EANH,6BAYJ,gBAAKY,UAAU,eAAf,UACE,SAAC,KAAD,WACE,gBAAKA,UAAU,eAAf,UACE,SAAC,KAAD,CACEA,UAAU,gBACVU,KAAK,KACLM,QAAS,SAACT,GACRA,EAAMU,iBACNhC,EAASG,EAAU,IACpB,EANH,oCAgBZ,SAAC,KAAD,WACE,gBAAKY,UAAU,eAAf,UACE,SAAC,KAAD,CACEF,MAAM,SACNY,KAAK,KACLM,QAAS,SAACE,GAAD,OArIJ,SAACC,EAAMjC,GACtBkC,OAAOC,SAAWD,OAAOC,SAASC,KAAO,qBAAuBH,EAAO,UAAYjC,CACpF,CAmI2BqC,CAASvC,EAAcwC,cAAetC,EAA7C,EAHX,kCAYX,C","sources":["views/Home.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  CCol,\n  CRow,\n  CCard,\n  CCardHeader,\n  CCardFooter,\n  CCardBody,\n  CCardText,\n  CButton,\n  CForm,\n  CFormInput,\n  CContainer,\n  CImage,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilClock } from '@coreui/icons'\nimport Datetime from 'react-datetime'\nimport 'react-datetime/css/react-datetime.css'\nimport logo from '../assets/images/levelup_logo.png'\n\nconst Home = () => {\n  let [selected_time, onChange] = useState(new Date())\n  const [title, setTitle] = useState('Time Remaining')\n  const handleChange = (event) => {\n    setTitle(event.target.value)\n  }\n  const redirect = (time, title) => {\n    window.location = window.location.href + '#/countdown?until=' + time + '&title=' + title\n  }\n  function calcBreak(breakAmt) {\n    const timeToAdd = breakAmt * 60 * 1000\n    let curTime = new Date()\n    selected_time = new Date(curTime.getTime() + timeToAdd)\n    return selected_time\n  }\n  return (\n    <CContainer sm>\n      <CRow>\n        <CCol>\n          <CImage src={logo} width={100} height={100} />\n        </CCol>\n      </CRow>\n      <CCard color=\"secondary\" textColor=\"dark\" className=\"shadow m-2 rounded\">\n        <CCardHeader className=\"fs-1 h1\">Countdown Timer</CCardHeader>\n        <CCardBody>\n          <CCardText className=\"fs-4\">\n            Choose a date and time below, then click the button to create your sharable timer.\n          </CCardText>\n          <CForm>\n            <CRow xs={{ cols: 1 }}>\n              <CCol className=\"mt-2\">\n                <CFormInput\n                  id=\"titlefield\"\n                  type=\"text\"\n                  label=\"Title\"\n                  placeholder=\"Time remaining\"\n                  onChange={handleChange}\n                  value={title}\n                  size=\"sm\"\n                  className=\"fs-5\"\n                />\n              </CCol>\n              <CCol className=\"mt-2\">\n                <label className=\"form-label\">\n                  <CIcon icon={cilClock} />\n                  &nbsp; Target Time\n                </label>\n                <Datetime\n                  initialViewMode=\"time\"\n                  initialValue={new Date()}\n                  value={selected_time}\n                  onChange={onChange}\n                  input={false}\n                  size=\"sm\"\n                />\n                <div className=\"form-text\">Must be a time in the future.</div>\n              </CCol>\n            </CRow>\n            <CRow className=\"justify-content-center\" xs={{ cols: 2 }} sm={{ cols: 5 }}>\n              <CCol>\n                <div className=\"d-grid gap-2\">\n                  <CButton\n                    className=\"mt-4 btn-dark\"\n                    size=\"sm\"\n                    onClick={(event) => {\n                      event.preventDefault()\n                      onChange(calcBreak(5))\n                    }}\n                  >\n                    5 Minutes\n                  </CButton>\n                </div>\n              </CCol>\n              <CCol>\n                <div className=\"d-grid gap-2\">\n                  <CButton\n                    className=\"mt-4 btn-dark\"\n                    size=\"sm\"\n                    onClick={(event) => {\n                      event.preventDefault()\n                      onChange(calcBreak(10))\n                    }}\n                  >\n                    10 Minutes\n                  </CButton>\n                </div>\n              </CCol>\n              <CCol>\n                <div className=\"d-grid gap-2\">\n                  <CButton\n                    className=\"mt-4 btn-dark\"\n                    size=\"sm\"\n                    onClick={(event) => {\n                      event.preventDefault()\n                      onChange(calcBreak(13))\n                    }}\n                  >\n                    13 Minutes\n                  </CButton>\n                </div>\n              </CCol>\n              <CCol>\n                <div className=\"d-grid gap-2\">\n                  <CButton\n                    className=\"mt-4 btn-dark\"\n                    size=\"sm\"\n                    onClick={(event) => {\n                      event.preventDefault()\n                      onChange(calcBreak(20))\n                    }}\n                  >\n                    20 Minutes\n                  </CButton>\n                </div>\n              </CCol>\n              <div className=\"d-grid gap-2\">\n                <CCol>\n                  <div className=\"d-grid gap-2\">\n                    <CButton\n                      className=\"mt-4 btn-dark\"\n                      size=\"sm\"\n                      onClick={(event) => {\n                        event.preventDefault()\n                        onChange(calcBreak(60))\n                      }}\n                    >\n                      1 Hour\n                    </CButton>\n                  </div>\n                </CCol>\n              </div>\n            </CRow>\n          </CForm>\n        </CCardBody>\n        <CCardFooter>\n          <div className=\"d-grid gap-2\">\n            <CButton\n              color=\"danger\"\n              size=\"lg\"\n              onClick={(e) => redirect(selected_time.toISOString(), title)}\n            >\n              Start Timer\n            </CButton>\n          </div>\n        </CCardFooter>\n      </CCard>\n    </CContainer>\n  )\n}\n\nexport default Home\n"],"names":["useState","Date","selected_time","onChange","title","setTitle","calcBreak","breakAmt","timeToAdd","curTime","getTime","sm","src","logo","width","height","color","textColor","className","xs","cols","id","type","label","placeholder","event","target","value","size","icon","cilClock","initialViewMode","initialValue","input","onClick","preventDefault","e","time","window","location","href","redirect","toISOString"],"sourceRoot":""}